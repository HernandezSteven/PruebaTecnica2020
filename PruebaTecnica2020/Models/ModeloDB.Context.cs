//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PruebaTecnica2020.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalonesEmpresarialesXYZEntities : DbContext
    {
        public SalonesEmpresarialesXYZEntities()
            : base("name=SalonesEmpresarialesXYZEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Ciudad> Ciudad { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Departamento> Departamento { get; set; }
        public virtual DbSet<Salon> Salon { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Motivo> Motivo { get; set; }
        public virtual DbSet<ClienteSalon> ClienteSalon { get; set; }
        public virtual DbSet<vw_InformeSolicitudes> vw_InformeSolicitudes { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spInsertCliente(string identificacionCliente, string primerNombreCliente, string segundoNombreCliente, string primerApellidoCliente, string segundoApellidoCliente, string telefonoCliente, string correoCliente, Nullable<int> idCiudad, Nullable<int> edadCliente)
        {
            var identificacionClienteParameter = identificacionCliente != null ?
                new ObjectParameter("identificacionCliente", identificacionCliente) :
                new ObjectParameter("identificacionCliente", typeof(string));
    
            var primerNombreClienteParameter = primerNombreCliente != null ?
                new ObjectParameter("PrimerNombreCliente", primerNombreCliente) :
                new ObjectParameter("PrimerNombreCliente", typeof(string));
    
            var segundoNombreClienteParameter = segundoNombreCliente != null ?
                new ObjectParameter("SegundoNombreCliente", segundoNombreCliente) :
                new ObjectParameter("SegundoNombreCliente", typeof(string));
    
            var primerApellidoClienteParameter = primerApellidoCliente != null ?
                new ObjectParameter("PrimerApellidoCliente", primerApellidoCliente) :
                new ObjectParameter("PrimerApellidoCliente", typeof(string));
    
            var segundoApellidoClienteParameter = segundoApellidoCliente != null ?
                new ObjectParameter("SegundoApellidoCliente", segundoApellidoCliente) :
                new ObjectParameter("SegundoApellidoCliente", typeof(string));
    
            var telefonoClienteParameter = telefonoCliente != null ?
                new ObjectParameter("telefonoCliente", telefonoCliente) :
                new ObjectParameter("telefonoCliente", typeof(string));
    
            var correoClienteParameter = correoCliente != null ?
                new ObjectParameter("correoCliente", correoCliente) :
                new ObjectParameter("correoCliente", typeof(string));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("idCiudad", idCiudad) :
                new ObjectParameter("idCiudad", typeof(int));
    
            var edadClienteParameter = edadCliente.HasValue ?
                new ObjectParameter("edadCliente", edadCliente) :
                new ObjectParameter("edadCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertCliente", identificacionClienteParameter, primerNombreClienteParameter, segundoNombreClienteParameter, primerApellidoClienteParameter, segundoApellidoClienteParameter, telefonoClienteParameter, correoClienteParameter, idCiudadParameter, edadClienteParameter);
        }
    }
}
